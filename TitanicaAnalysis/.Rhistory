setwd("~/All_Projects/Data_Science/R_Studio")
# Load raw data
test <- read.csv("test.csv", header=TRUE)
train <- read.csv("train.csv", header=TRUE)
# Add a survived variable to the test data set to allow for combinbing data sets
# The data.frame is an objecte like Python
# 'rep' means to replicate the string "None" for 'nrow' times (which is the total # of times in test)
# Lastly, we do this for all the rows and column in the test data set
test.survived <- data.frame(Survived = rep("None", nrow(test)), test[,])
# Combine data sets
data.combined <- rbind(train, test.survived)
# factors is a data type that structures it in categorize
data.combined$Survived <- as.factor(data.combined$Survived)
data.combined$Pclass <- as.factor(data.combined$Pclass)
# Info. on the R data types
str(data.combined)
# Create table of all the possible variables and the amnt. to each variable
table(data.combined$Survived)
# Distribution among classes, third class has the most amnt ppl while the second class has the least amt of ppl
table(data.combined$Pclass)
# load up ggplot
library(ggplot2)
# Hypothesis - Rich people survived at a higher rate
train$Pclass <- as.factor(train$Pclass)
# Pclass is the x-axis, color coordinate this on if they survived or not.
# Geom is the bar graph, the rest are labels
ggplot(train, aes(x=Pclass, fill=factor(Survived))) +
geom_bar(width=0.5) +
xlab("PClass") +
ylab("Total Count") +
labs(fill="Survived")
# Changing names from factors to strings
train$Name <- as.character(train$Name)
# Only get the info. for the first rows
head(train$Name)
# Unique names, but it seems there are some duplicates. There are 1307 names but 1309 observations
data.combined$Name <- as.character(data.combined$Name)
length(unique(data.combined$Name))
# Finding the issue with the duplicate values
# The which is like a 'WHERE' clause in SQL, we only get the data that are duplicates in the Name column
dup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), "Name"])
print(dup.names)
# Look at the data from these duplicates values
# Layman: From the data.combined, I only want the values which are in dup.names
data.combined[which(data.combined$Name %in% dup.names),]
# Cool string manipulation
library(stringr)
# load up all the strings that have the word "Miss. " in it
misses <- data.combined[which(str_detect(data.combined$Name, "Miss. ")),]
# Format [row, column]. INDEXES START AT 1 not 0!
misses[1:5,1:7]
# Using 'Mrs.' now
mrses <- data.combined[which(str_detect(data.combined$Name, "Mrs. ")),]
mrses[1:5, 1:7]
# Check males to see if any patters
males <- data.combined[which(train$Sex == "male"),]
males[1:5, 1:7]
# Expand relationship btw survival and pclass by adding new variable 'Title'
extractTitle <- function(name) {
name <- as.character(name)
if (length(grep("Miss. ", name)) > 0){
return ("Miss.")
} else if (length(grep("Master.", name)) > 0){
return ("Master.")
} else if (length(grep("Mrs.", name)) > 0){
return ("Mrs.")
} else if (length(grep("Mr.", name)) > 0){
return ("Mr.")
} else {
return ("Other")
}
}
titles <- NULL # An empty variable
# The i is the row, and the name is the column
for (i in 1:nrow(data.combined)) {
titles <- c(titles, extractTitle(data.combined[i, "Name"]))
}
data.combined$Title <- as.factor(titles)
# We only want info for survived in the train set, must only use that
# The test dataset is used so we can try to test our result with that dataset
ggplot(data.combined[1:891,], aes(x=Title, fill=factor(Survived))) +
geom_bar(width=0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
# Graph above tell us that women and children first, especially among middle and upper class
# A lot of men died from the lower and middle class (upper class were split even)
# Master: Young boys & Miss: Young girls
# Looking at the sex among different classes
ggplot(data.combined[1:891,], aes(x=Sex, fill=factor(Survived))) +
geom_bar(width=0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill="Survived")
# Looking at age over the entire data set
summary(data.combined$Age)
summary(data.combined[1:891, "Age"]) # Only looking at the train dataset
ggplot(data.combined[1:891,], aes(x=Age, fill=factor(Survived))) +
geom_histogram(binwidth=10) +
facet_wrap(~Sex + Pclass) +
xlab("Age") +
ylab("Total Count") +
labs(fill='Survived')
# Result: there are 263 NA's (or missing values), 177 come from train dataset
# Validate that "Master. " is a good proxy for male children
boys <- data.combined[which(data.combined$Title == "Master."),]
summary(boys$Age)
# Result: Seem positive. The max is 14.5 age and min is a 0.330
# Investigate information on "Miss."
misses <- data.combined[which(data.combined$Title == "Miss."),]
summary(misses$Age)
# Result: Not quite positive. Max is 63 and min is 0.17
# Only getting info. from the table where Survived is not equal to None for Age
ggplot(misses[misses$Survived != "None",], aes(x=Age, fill=factor(Survived))) +
facet_wrap(~Pclass) +
geom_histogram(binwidth=10) +
ggtitle("Age for Miss. by Pclass") +
xlab("Age") +
ylab("Total Count")
# Calculating misses that are traveling alone
misses.alone <- misses[which(misses$SibSp == 0 & misses$Parch == 0),]
summary(misses.alone$Age)
length(which(misses.alone$Age <= 14.5))
# Result: misses who are traveling tend to be young adults
# Info on the sibsp variable
summary(data.combined$SibSp)
# Find the different number of Sibsp possible
length(unique(data.combined$SibSp))
# Change this data type to factor
data.combined$SibSp <- as.factor(data.combined$SibSp)
ggplot(data.combined[1:891,], aes(x=SibSp, fill=factor(Survived))) +
facet_wrap(~Pclass + Title) +
geom_bar(width=1) +
ggtitle("Pclass, title") +
xlab("Sibsb") +
ylab("Total Count") +
ylim(0,300) + # Interval for the y-axis
labs(fill='Survived')
# Info on the parch variable
data.combined$Parch <- as.factor(data.combined$Parch)
ggplot(data.combined[1:891,], aes(x=Parch, fill=factor(Survived))) +
facet_wrap(~Pclass + Title) +
geom_bar(width=1) +
ggtitle("Pclass, title") +
xlab("Parch") +
ylab("Total Count") +
ylim(0,300) + # Interval for the y-axis
labs(fill='Survived')
# Feature enginering. Creating family size
# We are combining it one list after the other.
# Ex. It stores all the 'Sibsb' variable in one big list and 'Parsh' in another large list
# then, we can combine both since they are indexed the same
temp.sibsp <- c(train$SibSp, test$SibSp)
temp.parsh <- c(train$Parch, test$Parch)
data.combined$FamilySize <- as.factor(temp.sibsp + temp.parsh + 1)
ggplot(data.combined[1:891,], aes(x=FamilySize, fill=factor(Survived))) +
facet_wrap(~Pclass + Title) +
geom_bar(width=1) +
ggtitle("Pclass, title") +
xlab("Family Size") +
ylab("Total Count") +
ylim(0,300) + # Interval for the y-axis
labs(fill='Survived')
# Info on the Ticket variable
str(data.combined$Ticket) # 929 factor levels, probably not a factor level
# Converting Ticket variable to string
data.combined$Ticket <- as.character(data.combined$Ticket)
data.combined$Ticket[1:20] # Outputting from 1-20
# Ticket variable looks a bit unstructured
# Looking at the first character in the Ticket variable
substr(data.combined$Ticket, 1, 1) # (variable to look at, starting point, ending point)
# (Test, if it's true - return this, otherwise - return this)
# Smart way to check if there are any empty variable
ticket.var.char <- ifelse(data.combined$Title == "", " ", substr(data.combined$Ticket, 1, 1))
unique(ticket.var.char)
# Creating new variable to the data.combined dataset
data.combined$Tick.FirstChar <- as.factor(ticket.var.char)
# High-level plot of the data
ggplot(data.combined[1:891, ], aes(x=Tick.FirstChar, fill=factor(Survived))) +
geom_bar() +
ggtitle("Survival by Ticket Fare's first character") +
xlab("Ticket fare's first character") +
ylab("Total Count") +
ylim(0,350) +
labs(fill="Survived")
# Adding facet-wrap or categorizing the data by Pclass
ggplot(data.combined[1:891, ], aes(x=Tick.FirstChar, fill=factor(Survived))) +
geom_bar() +
facet_wrap(~Pclass) +
ggtitle("PClass") +
xlab("Ticket fare's first character") +
ylab("Total Count") +
ylim(0,150) +
labs(fill="Survived")
# Adding Title variable to the facet-wrap
ggplot(data.combined[1:891, ], aes(x=Tick.FirstChar, fill=factor(Survived))) +
geom_bar() +
facet_wrap(~Pclass + Title) +
ggtitle("PClass, Title") +
xlab("Ticket fare's first character") +
ylab("Total Count") +
ylim(0,200) +
labs(fill="Survived")
# Recap: The ticket variable doesn't seem to be providing much info, so we probably
# wouldn't use that variable in the algorithm
# Remember: Simple models are preferred over more complicated models
# Info on the Fare variable
str(data.combined$Fare)
summary(data.combined$Fare)
length(unique(data.combined$Fare))
# Can't convert fare to factor, large number of observations.
# Treat as numeric and visualize it
ggplot(data.combined, aes(x=Fare)) +
geom_histogram(binwidth=5) +
ggtitle("Combined Fare Distribution") +
xlab("Fare") +
ylab("Total Count") +
ylim(0,200)
# Let's see if fare has any predictive power
ggplot(data.combined[1:891, ], aes(x=Fare, fill=factor(Survived))) +
geom_histogram(binwidth=5) +
facet_wrap(~Pclass + Title) +
ggtitle("PClass, Title") +
xlab("Fare") +
ylab("Total Count") +
ylim(0,50) +
labs(fill="Survived")
# Recap: There's not much info that the fare can provide that we don't know already
# we don't want to add too much variables, bc then we will be overfitting
str(data.combined$Cabin)
data.combined$Cabin <- as.character(data.combined$Cabin)
data.combined$Cabin[1:100]
data.combined[which(data.combined$Cabin == ""), "Cabin"]
(data.combined$Cabin == "")
data.combined[which(data.combined$Cabin == ""), ]
data.combined$Cabin[1:100]
data.combined[which(data.combined$Cabin == ""), "Cabin"] <- 'U'
data.combined$Cabin[1:100]
substr(data.combined$Cabin, 1, 1)
lenght(substr(data.combined$Cabin, 1, 1))
lenght(substr(data.combined$Cabin, 1, 1))
unique(substr(data.combined$Cabin, 1, 1))
length(unique(substr(data.combined$Cabin, 1, 1)))
data.combined$Cabin.FirstChar <- as.factor(substr(data.combined$Cabin, 1, 1))
str(Cabin.FirstChar)
str(data.combined$Cabin.FirstChar)
?level
?levels
str(data.combined$Cabin.FirstChar)
levels(data.combined$Cabin.FirstChar)
ggplot(data.combined[1:891, ], aes(x=Cabin.FirstChar, fill=factor(Survived))) +
geom_bar() +
facet_wrap(~Pclass + Title) +
ggtitle("PClass, Title") +
xlab("Ticket cabin's first character") +
ylab("Total Count") +
ylim(0,500) +
labs(fill="Survived")
ggplot(data.combined[1:891, ], aes(x=Cabin.FirstChar, fill=factor(Survived))) +
geom_bar() +
ggtitle("PClass, Title") +
xlab("Ticket cabin's first character") +
ylab("Total Count") +
ylim(0,750) +
labs(fill="Survived")
ggplot(data.combined[1:891, ], aes(x=Cabin.FirstChar, fill=factor(Survived))) +
geom_bar() +
facet_wrap(~Pclass) +
ggtitle("PClass, Title") +
xlab("Ticket cabin's first character") +
ylab("Total Count") +
ylim(0,500) +
labs(fill="Survived")
ggplot(data.combined[1:891, ], aes(x=Cabin.FirstChar, fill=factor(Survived))) +
geom_bar() +
facet_wrap(~Pclass + Title) +
ggtitle("PClass, Title") +
xlab("Ticket cabin's first character") +
ylab("Total Count") +
ylim(0,500) +
labs(fill="Survived")
data.combined$MultipleCabins <- as.factor(ifelse(str_detect(data.combined$Cabin == " "), "Y", "N"))
data.combined$MultipleCabins <- as.factor(ifelse(str_detect(data.combined$Cabin, " "), "Y", "N"))
ggplot(data.combined[1:891, ], aes(x=MultipleCabins, fill=factor(Survived))) +
geom_bar() +
facet_wrap(~Pclass + Title) +
ggtitle("PClass, Title") +
xlab("Multiple Cabins") +
ylab("Total Count") +
ylim(0,350) +
labs(fill="Survived")
str(data.combined$Embarked)
str(data.combined$Embarked)
levels(data.combined$Embarked)
ggplot(data.combined[1:891, ], aes(x=Embarked, fill=factor(Survived))) +
geom_bar() +
facet_wrap(~Pclass + Title) +
ggtitle("PClass, Title") +
xlab("Embarjed") +
ylab("Total Count") +
ylim(0,300) +
labs(fill="Survived")
